<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Senparc.Weixin.MP</name>
    </assembly>
    <members>
        <member name="T:Senparc.Weixin.MP.AdvancedAPIs.Custom">
            <summary>
            客服接口
            </summary>
        </member>
        <member name="M:Senparc.Weixin.MP.AdvancedAPIs.Custom.SendText(System.String,System.String,System.String)">
            <summary>
            发送文本信息
            </summary>
            <param name="accessToken"></param>
            <param name="openId"></param>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.MP.AdvancedAPIs.Custom.SendImage(System.String,System.String,System.String)">
            <summary>
            发送图片消息
            </summary>
            <param name="accessToken"></param>
            <param name="openId"></param>
            <param name="mediaId"></param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.MP.AdvancedAPIs.Custom.SendVoice(System.String,System.String,System.String)">
            <summary>
            发送语音消息
            </summary>
            <param name="accessToken"></param>
            <param name="openId"></param>
            <param name="mediaId"></param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.MP.AdvancedAPIs.Custom.SendVideo(System.String,System.String,System.String,System.String)">
            <summary>
            发送视频消息
            </summary>
            <param name="accessToken"></param>
            <param name="openId"></param>
            <param name="mediaId"></param>
            <param name="thumbMediaId"></param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.MP.AdvancedAPIs.Custom.SendMusic(System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            发送音乐消息
            </summary>
            <param name="accessToken"></param>
            <param name="openId"></param>
            <param name="title">音乐标题（非必须）</param>
            <param name="description">音乐描述（非必须）</param>
            <param name="musicUrl">音乐链接</param>
            <param name="hqMusicUrl">高品质音乐链接，wifi环境优先使用该链接播放音乐</param>
            <param name="thumbMediaId">视频缩略图的媒体ID</param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.MP.AdvancedAPIs.Custom.SendNews(System.String,System.String,System.Collections.Generic.List{Senparc.Weixin.MP.Entities.Article})">
            <summary>
            发送图文消息
            </summary>
            <param name="accessToken"></param>
            <param name="openId"></param>
            <param name="title">音乐标题（非必须）</param>
            <param name="description">音乐描述（非必须）</param>
            <param name="musicUrl">音乐链接</param>
            <param name="hqMusicUrl">高品质音乐链接，wifi环境优先使用该链接播放音乐</param>
            <param name="thumbMediaId">视频缩略图的媒体ID</param>
            <returns></returns>
        </member>
        <member name="T:Senparc.Weixin.MP.AdvancedAPIs.CreateGroupResult">
            <summary>
            创建分组返回结果
            </summary>
        </member>
        <member name="T:Senparc.Weixin.MP.Entities.WxJsonResult">
            <summary>
            JSON返回结果（用于菜单接口等）
            </summary>
        </member>
        <member name="P:Senparc.Weixin.MP.Entities.WxJsonResult.P2PData">
            <summary>
            为P2P返回结果做准备
            </summary>
        </member>
        <member name="T:Senparc.Weixin.MP.AdvancedAPIs.GetGroupIdResult">
            <summary>
            获取用户分组ID返回结果
            </summary>
        </member>
        <member name="T:Senparc.Weixin.MP.AdvancedAPIs.Groups">
            <summary>
            用户组接口
            </summary>
        </member>
        <member name="M:Senparc.Weixin.MP.AdvancedAPIs.Groups.Create(System.String,System.String)">
            <summary>
            创建分组
            </summary>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.MP.AdvancedAPIs.Groups.Get(System.String)">
            <summary>
            发送文本信息
            </summary>
            <param name="accessToken"></param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.MP.AdvancedAPIs.Groups.GetId(System.String,System.String)">
            <summary>
            获取用户分组
            </summary>
            <param name="accessToken"></param>
            <param name="openId"></param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.MP.AdvancedAPIs.Groups.Update(System.String,System.Int32,System.String)">
            <summary>
            创建分组
            </summary>
            <param name="accessToken"></param>
            <param name="id"></param>
            <param name="name">分组名字（30个字符以内）</param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.MP.AdvancedAPIs.Groups.MemberUpdate(System.String,System.String,System.Int32)">
            <summary>
            移动用户分组
            </summary>
            <param name="accessToken"></param>
            <param name="openId"></param>
            <param name="toGroupId"></param>
            <returns></returns>
        </member>
        <member name="P:Senparc.Weixin.MP.AdvancedAPIs.GroupsJson_Group.count">
            <summary>
            此属性在CreateGroupResult的Json数据中，创建结果中始终为0
            </summary>
        </member>
        <member name="T:Senparc.Weixin.MP.AdvancedAPIs.Media">
            <summary>
            多媒体文件接口
            </summary>
        </member>
        <member name="M:Senparc.Weixin.MP.AdvancedAPIs.Media.Upload(System.String,Senparc.Weixin.MP.UploadMediaFileType,System.String)">
            <summary>
            上传媒体文件
            </summary>
            <param name="accessToken"></param>
            <param name="type"></param>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.MP.AdvancedAPIs.Media.Get(System.String,System.String,System.IO.Stream)">
            <summary>
            下载媒体文件
            </summary>
            <param name="accessToken"></param>
            <param name="mediaId"></param>
            <param name="stream"></param>
        </member>
        <member name="T:Senparc.Weixin.MP.AdvancedAPIs.OAuthAccessTokenResult">
            <summary>
            获取OAuth AccessToken的结果
            如果错误，返回结果{"errcode":40029,"errmsg":"invalid code"}
            </summary>
        </member>
        <member name="T:Senparc.Weixin.MP.AdvancedAPIs.OAuthScope">
            <summary>
            应用授权作用域
            </summary>
        </member>
        <member name="F:Senparc.Weixin.MP.AdvancedAPIs.OAuthScope.snsapi_base">
            <summary>
            不弹出授权页面，直接跳转，只能获取用户openid
            </summary>
        </member>
        <member name="F:Senparc.Weixin.MP.AdvancedAPIs.OAuthScope.snsapi_userinfo">
            <summary>
            弹出授权页面，可通过openid拿到昵称、性别、所在地。并且，即使在未关注的情况下，只要用户授权，也能获取其信息
            </summary>
        </member>
        <member name="M:Senparc.Weixin.MP.AdvancedAPIs.OAuth.GetAuthorizeUrl(System.String,System.String,System.String,Senparc.Weixin.MP.AdvancedAPIs.OAuthScope,System.String)">
            <summary>
            获取验证地址
            </summary>
            <param name="appId"></param>
            <param name="redirectUrl"></param>
            <param name="state"></param>
            <param name="scope"></param>
            <param name="responseType"></param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.MP.AdvancedAPIs.OAuth.GetAccessToken(System.String,System.String,System.String,System.String)">
            <summary>
            获取AccessToken
            </summary>
            <param name="appId"></param>
            <param name="secret"></param>
            <param name="code">code作为换取access_token的票据，每次用户授权带上的code将不一样，code只能使用一次，5分钟未被使用自动过期。</param>
            <param name="grantType"></param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.MP.AdvancedAPIs.OAuth.RefreshToken(System.String,System.String,System.String)">
            <summary>
            刷新access_token（如果需要）
            </summary>
            <param name="appId"></param>
            <param name="refreshToken">填写通过access_token获取到的refresh_token参数</param>
            <param name="grantType"></param>
            <returns></returns>
        </member>
        <member name="T:Senparc.Weixin.MP.AdvancedAPIs.OAuthUserInfo">
            <summary>
            通过OAuth的获取到的用户信息（snsapi_userinfo=scope）
            </summary>
        </member>
        <member name="P:Senparc.Weixin.MP.AdvancedAPIs.OAuthUserInfo.sex">
            <summary>
            用户的性别，值为1时是男性，值为2时是女性，值为0时是未知
            </summary>
        </member>
        <member name="P:Senparc.Weixin.MP.AdvancedAPIs.OAuthUserInfo.headimgurl">
            <summary>
            用户头像，最后一个数值代表正方形头像大小（有0、46、64、96、132数值可选，0代表640*640正方形头像），用户没有头像时该项为空
            </summary>
        </member>
        <member name="P:Senparc.Weixin.MP.AdvancedAPIs.OAuthUserInfo.privilege">
            <summary>
            用户特权信息，json 数组，如微信沃卡用户为（chinaunicom）
            作者注：其实这个格式称不上JSON，只是个单纯数组。
            </summary>
        </member>
        <member name="T:Senparc.Weixin.MP.AdvancedAPIs.CreateQrCodeResult">
            <summary>
            二维码创建返回结果
            </summary>
        </member>
        <member name="T:Senparc.Weixin.MP.AdvancedAPIs.QrCode">
            <summary>
            二维码接口
            </summary>
        </member>
        <member name="M:Senparc.Weixin.MP.AdvancedAPIs.QrCode.Create(System.String,System.Int32,System.Int32)">
            <summary>
            创建二维码
            </summary>
            <param name="expireSeconds">该二维码有效时间，以秒为单位。 最大不超过1800。0时为永久二维码</param>
            <param name="sceneId">场景值ID，临时二维码时为32位整型，永久二维码时最大值为1000</param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.MP.AdvancedAPIs.QrCode.ShowQrCode(System.String,System.IO.Stream)">
            <summary>
            获取二维码（不需要AccessToken）
            错误情况下（如ticket非法）返回HTTP错误码404。
            </summary>
            <param name="ticket"></param>
            <param name="stream"></param>
        </member>
        <member name="T:Senparc.Weixin.MP.AdvancedAPIs.User">
            <summary>
            用户接口
            </summary>
        </member>
        <member name="M:Senparc.Weixin.MP.AdvancedAPIs.User.Info(System.String,System.String,Senparc.Weixin.MP.Language)">
            <summary>
            获取用户信息
            </summary>
            <param name="accessToken">调用接口凭证</param>
            <param name="openId">普通用户的标识，对当前公众号唯一</param>
            <param name="lang">返回国家地区语言版本，zh_CN 简体，zh_TW 繁体，en 英语</param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.MP.AdvancedAPIs.User.Get(System.String,System.String)">
            <summary>
            获取关注着OpenId信息
            </summary>
            <param name="accessToken"></param>
            <param name="nextOpenId"></param>
            <returns></returns>
        </member>
        <member name="T:Senparc.Weixin.MP.AdvancedAPIs.UserInfoJson">
            <summary>
            高级接口获取的用户信息
            </summary>
        </member>
        <member name="T:Senparc.Weixin.MP.Agent.MessageAgent">
            <summary>
            代理请求
            注意！使用代理必然导致网络访问节点增加，会加重响应延时，
                  因此建议准备至少2-3秒的延迟时间的准备，
                  如果增加2-3秒后远远超过5秒的微信服务器等待时间，
                  需要慎重使用，否则可能导致用户无法收到消息。
            
            此外这个类中的方法也可以用于模拟服务器发送消息到自己的服务器进行测试。
            </summary>
        </member>
        <member name="M:Senparc.Weixin.MP.Agent.MessageAgent.RequestXml(Senparc.Weixin.MP.MessageHandlers.IMessageHandler,System.String,System.String,System.IO.Stream,System.Boolean)">
            <summary>
            获取Xml结果。
            </summary>
            <param name="url"></param>
            <param name="token"></param>
            <param name="stream"></param>
            <param name="useWeiWeiHiKey">是否使用WeiWeiHiKey，如果使用，则token为WeiWeiHiKey</param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.MP.Agent.MessageAgent.RequestXml(Senparc.Weixin.MP.MessageHandlers.IMessageHandler,System.String,System.String,System.String)">
            <summary>
            获取Xml结果
            </summary>
            <param name="url"></param>
            <param name="token"></param>
            <param name="xml"></param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.MP.Agent.MessageAgent.RequestWeiWeiHiXml(Senparc.Weixin.MP.MessageHandlers.IMessageHandler,System.String,System.String,System.String)">
            <summary>
            对接Souidea（P2P）平台，获取Xml结果，使用WeiWeiHiKey对接
            WeiWeiHiKey的获取方式请看：
            </summary>
            <param name="weiweihiKey"></param>
            <param name="xml"></param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.MP.Agent.MessageAgent.RequestResponseMessage(Senparc.Weixin.MP.MessageHandlers.IMessageHandler,System.String,System.String,System.IO.Stream)">
            <summary>
            获取ResponseMessge结果
            </summary>
            <param name="url"></param>
            <param name="token"></param>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.MP.Agent.MessageAgent.RequestResponseMessage(Senparc.Weixin.MP.MessageHandlers.IMessageHandler,System.String,System.String,System.String)">
            <summary>
            获取ResponseMessge结果
            </summary>
            <param name="url"></param>
            <param name="token"></param>
            <param name="xml"></param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.MP.Agent.MessageAgent.RequestWeiweihiResponseMessage(Senparc.Weixin.MP.MessageHandlers.IMessageHandler,System.String,System.String,System.String)">
            <summary>
            获取Souidea开放平台的ResponseMessge结果
            </summary>
            <param name="weiweihiKey"></param>
            <param name="xml"></param>
            <param name="weiweihiDomainName"></param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.MP.Agent.MessageAgent.RequestWeiweihiResponseMessage(Senparc.Weixin.MP.MessageHandlers.IMessageHandler,System.String,System.Xml.Linq.XDocument,System.String)">
            <summary>
            获取Souidea开放平台的ResponseMessge结果
            </summary>
            <param name="weiweihiKey"></param>
            <param name="weiweihiDomainName"></param>
            <param name="document"></param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.MP.Agent.MessageAgent.RequestWeiweihiResponseMessage(Senparc.Weixin.MP.MessageHandlers.IMessageHandler,System.String,Senparc.Weixin.MP.Entities.RequestMessageBase,System.String)">
            <summary>
            获取Souidea开放平台的ResponseMessge结果
            </summary>
            <param name="weiweihiKey"></param>
            <param name="requestMessage"></param>
            <param name="weiweihiDomainName"></param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.MP.Agent.MessageAgent.CheckUrlAndToken(System.String,System.String)">
            <summary>
            使用GET请求测试URL和TOKEN是否可用
            </summary>
            <param name="url"></param>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="F:Senparc.Weixin.MP.CheckSignature.Token">
            <summary>
            在网站没有提供Token（或传入为null）的情况下的默认Token，建议在网站中进行配置。
            </summary>
        </member>
        <member name="M:Senparc.Weixin.MP.CheckSignature.Check(System.String,System.String,System.String,System.String)">
            <summary>
            检查签名是否正确
            </summary>
            <param name="signature"></param>
            <param name="timestamp"></param>
            <param name="nonce"></param>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.MP.CheckSignature.GetSignature(System.String,System.String,System.String)">
            <summary>
            返回正确的签名
            </summary>
            <param name="timestamp"></param>
            <param name="nonce"></param>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="T:Senparc.Weixin.MP.CommonAPIs.AccessTokenContainer">
            <summary>
            通用接口AccessToken容器，用于自动管理AccessToken，如果过期会重新获取
            </summary>
        </member>
        <member name="M:Senparc.Weixin.MP.CommonAPIs.AccessTokenContainer.Register(System.String,System.String)">
            <summary>
            注册应用凭证信息，此操作只是注册，不会马上获取Token，并将清空之前的Token，
            </summary>
            <param name="appId"></param>
            <param name="appSecret"></param>
        </member>
        <member name="M:Senparc.Weixin.MP.CommonAPIs.AccessTokenContainer.TryGetToken(System.String,System.String,System.Boolean)">
            <summary>
            使用完整的应用凭证获取Token，如果不存在将自动注册
            </summary>
            <param name="appId"></param>
            <param name="appSecret"></param>
            <param name="getNewToken"></param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.MP.CommonAPIs.AccessTokenContainer.GetToken(System.String,System.Boolean)">
            <summary>
            获取可用Token
            </summary>
            <param name="appId"></param>
            <param name="getNewToken">是否强制重新获取新的Token</param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.MP.CommonAPIs.AccessTokenContainer.GetTokenResult(System.String,System.Boolean)">
            <summary>
            获取可用Token
            </summary>
            <param name="appId"></param>
            <param name="getNewToken">是否强制重新获取新的Token</param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.MP.CommonAPIs.AccessTokenContainer.CheckRegistered(System.String)">
            <summary>
            检查是否已经注册
            </summary>
            <param name="appId"></param>
            <returns></returns>
        </member>
        <!-- 对于成员“T:Senparc.Weixin.MP.CommonAPIs.CommonApi”忽略有格式错误的 XML 注释 -->
        <member name="M:Senparc.Weixin.MP.CommonAPIs.CommonApi.GetToken(System.String,System.String,System.String)">
            <summary>
            获取凭证接口
            </summary>
            <param name="grant_type">获取access_token填写client_credential</param>
            <param name="appid">第三方用户唯一凭证</param>
            <param name="secret">第三方用户唯一凭证密钥，既appsecret</param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.MP.CommonAPIs.CommonApi.GetUserInfo(System.String,System.String)">
            <summary>
            用户信息接口
            </summary>
            <param name="accessToken"></param>
            <param name="openId"></param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.MP.CommonAPIs.CommonApi.UploadMediaFile(System.String,Senparc.Weixin.MP.UploadMediaFileType,System.String)">
             <summary>
             媒体文件上传接口
            注意事项
            1.上传的媒体文件限制：
            图片（image) : 1MB，支持JPG格式
            语音（voice）：1MB，播放长度不超过60s，支持MP4格式
            视频（video）：10MB，支持MP4格式
            缩略图（thumb)：64KB，支持JPG格式
            2.媒体文件在后台保存时间为3天，即3天后media_id失效
             </summary>
             <param name="accessToken"></param>
             <param name="type">上传文件类型</param>
             <param name="fileName">上传文件完整路径+文件名</param>
             <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.MP.CommonAPIs.CommonApi.CreateMenu(System.String,Senparc.Weixin.MP.Entities.Menu.ButtonGroup)">
            <summary>
            创建菜单
            </summary>
            <param name="accessToken"></param>
            <param name="buttonData">菜单内容</param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.MP.CommonAPIs.CommonApi.GetSingleButtonFromJsonObject(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            获取单击按钮
            </summary>
            <param name="objs"></param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.MP.CommonAPIs.CommonApi.GetMenuFromJson(System.String)">
            <summary>
            从JSON字符串获取菜单对象
            </summary>
            <param name="jsonString"></param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.MP.CommonAPIs.CommonApi.GetMenu(System.String)">
            <summary>
            获取当前菜单，如果菜单不存在，将返回null
            </summary>
            <param name="accessToken"></param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.MP.CommonAPIs.CommonApi.GetMenuFromJsonResult(Senparc.Weixin.MP.GetMenuResultFull)">
            <summary>
            根据微信返回的Json数据得到可用的GetMenuResult结果
            </summary>
            <param name="resultFull"></param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.MP.CommonAPIs.CommonApi.DeleteMenu(System.String)">
            <summary>
            删除菜单
            </summary>
            <param name="accessToken"></param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.MP.CommonAPIs.CommonJsonSend.Send(System.String,System.String,System.Object,Senparc.Weixin.MP.CommonAPIs.CommonJsonSendType)">
            <summary>
            向需要AccessToken的API发送消息的公共方法
            </summary>
            <param name="accessToken">这里的AccessToken是通用接口的AccessToken，非OAuth的。如果不需要，可以为null，此时urlFormat不要提供{0}参数</param>
            <param name="urlFormat"></param>
            <param name="data">如果是Get方式，可以为null</param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.MP.CommonAPIs.CommonJsonSend.Send``1(System.String,System.String,System.Object,Senparc.Weixin.MP.CommonAPIs.CommonJsonSendType)">
            <summary>
            向需要AccessToken的API发送消息的公共方法
            </summary>
            <param name="accessToken">这里的AccessToken是通用接口的AccessToken，非OAuth的。如果不需要，可以为null，此时urlFormat不要提供{0}参数</param>
            <param name="urlFormat"></param>
            <param name="data">如果是Get方式，可以为null</param>
            <returns></returns>
        </member>
        <member name="P:Senparc.Weixin.MP.Context.MessageContainer`1.MaxRecordCount">
            <summary>
            最大记录条数（保留尾部），如果小于等于0则不限制
            </summary>
        </member>
        <member name="T:Senparc.Weixin.MP.Context.MessageQueue`1">
            <summary>
            微信消息列队（针对单个账号的往来消息）
            </summary>
            <typeparam name="TM"></typeparam>
        </member>
        <member name="T:Senparc.Weixin.MP.Context.WeixinContextRemovedEventArgs">
            <summary>
            对话上下文被删除时触发事件的事件数据
            </summary>
        </member>
        <member name="P:Senparc.Weixin.MP.Context.WeixinContextRemovedEventArgs.OpenId">
            <summary>
            该用户的OpenId
            </summary>
        </member>
        <member name="P:Senparc.Weixin.MP.Context.WeixinContextRemovedEventArgs.LastActiveTime">
            <summary>
            最后一次响应时间
            </summary>
        </member>
        <member name="P:Senparc.Weixin.MP.Context.WeixinContextRemovedEventArgs.MessageContext">
            <summary>
            上下文对象
            </summary>
        </member>
        <member name="M:Senparc.Weixin.MP.Entities.Extensions.ConvertToRequestMessageText(Senparc.Weixin.MP.Entities.IRequestMessageEventBase)">
            <summary>
            将RequestMessageEventBase转换成RequestMessageText类型，其中Content = requestMessage.EventKey
            </summary>
            <param name="requestMessageEvent"></param>
            <returns></returns>
        </member>
        <member name="T:Senparc.Weixin.MP.Entities.GoogleMap.MarkerSize">
            <summary>
            标记大小
            </summary>
        </member>
        <member name="P:Senparc.Weixin.MP.Entities.GoogleMap.Markers.Size">
            <summary>
            （可选）指定集合 {tiny, mid, small} 中的标记大小。如果未设置 size 参数，标记将以其默认（常规）大小显示。
            </summary>
        </member>
        <member name="P:Senparc.Weixin.MP.Entities.GoogleMap.Markers.Color">
            <summary>
            （可选）指定 24 位颜色（例如 color=0xFFFFCC）或集合 {black, brown, green, purple, yellow, blue, gray, orange, red, white} 中预定义的一种颜色。
            </summary>
        </member>
        <member name="P:Senparc.Weixin.MP.Entities.GoogleMap.Markers.Label">
            <summary>
            （可选）指定集合 {A-Z, 0-9} 中的一个大写字母数字字符。
            </summary>
        </member>
        <member name="P:Senparc.Weixin.MP.Entities.GoogleMap.Markers.X">
            <summary>
            经度longitude
            </summary>
        </member>
        <member name="P:Senparc.Weixin.MP.Entities.GoogleMap.Markers.Y">
            <summary>
            纬度latitude
            </summary>
        </member>
        <member name="T:Senparc.Weixin.MP.Entities.AccessTokenResult">
            <summary>
            access_token请求后的JSON返回格式
            </summary>
        </member>
        <member name="P:Senparc.Weixin.MP.Entities.AccessTokenResult.access_token">
            <summary>
            获取到的凭证
            </summary>
        </member>
        <member name="P:Senparc.Weixin.MP.Entities.AccessTokenResult.expires_in">
            <summary>
            凭证有效时间，单位：秒
            </summary>
        </member>
        <member name="T:Senparc.Weixin.MP.GetMenuResultFull">
            <summary>
            获取菜单时候的完整结构，用于接收微信服务器返回的Json信息
            </summary>
        </member>
        <member name="T:Senparc.Weixin.MP.Entities.GetMenuResult">
            <summary>
            GetMenu返回的Json结果
            </summary>
        </member>
        <member name="T:Senparc.Weixin.MP.Entities.UploadMediaFileResult">
            <summary>
            上传媒体文件返回结果
            </summary>
        </member>
        <member name="T:Senparc.Weixin.MP.Entities.WeixinUserInfoResult">
            <summary>
            用户信息
            </summary>
        </member>
        <member name="P:Senparc.Weixin.MP.Entities.WeixinUserInfoResult.subscribe">
            <summary>
            用户是否订阅该公众号标识，值为0时，拉取不到其余信息
            </summary>
        </member>
        <member name="P:Senparc.Weixin.MP.Entities.WeixinUserInfoResult.openid">
            <summary>
            普通用户的标识，对当前公众号唯一
            </summary>
        </member>
        <member name="P:Senparc.Weixin.MP.Entities.WeixinUserInfoResult.nickname">
            <summary>
            普通用户的昵称
            </summary>
        </member>
        <member name="P:Senparc.Weixin.MP.Entities.WeixinUserInfoResult.headimgurl">
            <summary>
            普通用户的头像链接
            </summary>
        </member>
        <member name="P:Senparc.Weixin.MP.Entities.WeixinUserInfoResult.language">
            <summary>
            普通用户的语言，简体中文为zh_CN
            </summary>
        </member>
        <member name="T:Senparc.Weixin.MP.Entities.Menu.BaseButton">
            <summary>
            所有按钮基类
            </summary>
        </member>
        <member name="P:Senparc.Weixin.MP.Entities.Menu.BaseButton.name">
            <summary>
            按钮描述，既按钮名字，不超过16个字节，子菜单不超过40个字节
            </summary>
        </member>
        <member name="T:Senparc.Weixin.MP.Entities.Menu.ButtonGroup">
            <summary>
            整个按钮设置（可以直接用ButtonGroup实例返回JSON对象）
            </summary>
        </member>
        <member name="P:Senparc.Weixin.MP.Entities.Menu.ButtonGroup.button">
            <summary>
            按钮数组，按钮个数应为2~3个
            </summary>
        </member>
        <member name="T:Senparc.Weixin.MP.Entities.Menu.SingleButton">
            <summary>
            所有单击按钮的基类（view，click等）
            </summary>
        </member>
        <member name="P:Senparc.Weixin.MP.Entities.Menu.SingleButton.type">
            <summary>
            按钮类型（click或view）
            </summary>
        </member>
        <member name="T:Senparc.Weixin.MP.Entities.Menu.SingleClickButton">
            <summary>
            单个按键
            </summary>
        </member>
        <member name="P:Senparc.Weixin.MP.Entities.Menu.SingleClickButton.key">
            <summary>
            类型为click时必须。
            按钮KEY值，用于消息接口(event类型)推送，不超过128字节
            </summary>
        </member>
        <member name="T:Senparc.Weixin.MP.Entities.Menu.SubButton">
            <summary>
            子菜单
            </summary>
        </member>
        <member name="P:Senparc.Weixin.MP.Entities.Menu.SubButton.sub_button">
            <summary>
            子按钮数组，按钮个数应为2~5个
            </summary>
        </member>
        <member name="T:Senparc.Weixin.MP.Entities.Menu.SingleViewButton">
            <summary>
            Url按键
            </summary>
        </member>
        <member name="P:Senparc.Weixin.MP.Entities.Menu.SingleViewButton.url">
            <summary>
            类型为view时必须
            网页链接，用户点击按钮可打开链接，不超过256字节
            </summary>
        </member>
        <member name="T:Senparc.Weixin.MP.Entities.MessageBase">
            <summary>
            所有Request和Response消息的基类
            </summary>
        </member>
        <member name="T:Senparc.Weixin.MP.Entities.RequestMessageBase">
            <summary>
            接收到请求的消息
            </summary>
        </member>
        <member name="P:Senparc.Weixin.MP.Entities.IRequestMessageEventBase.Event">
            <summary>
            事件类型
            </summary>
        </member>
        <member name="P:Senparc.Weixin.MP.Entities.IRequestMessageEventBase.EventKey">
            <summary>
            事件KEY值，与自定义菜单接口中KEY值对应
            </summary>
        </member>
        <member name="P:Senparc.Weixin.MP.Entities.RequestMessageEventBase.Event">
            <summary>
            事件类型
            </summary>
        </member>
        <member name="P:Senparc.Weixin.MP.Entities.RequestMessageEventBase.EventKey">
            <summary>
            事件KEY值，与自定义菜单接口中KEY值对应，如果是View，则是跳转到的URL地址
            </summary>
        </member>
        <member name="P:Senparc.Weixin.MP.Entities.RequestMessageEvent_Enter.Event">
            <summary>
            事件类型
            </summary>
        </member>
        <member name="T:Senparc.Weixin.MP.Entities.RequestMessageEvent_Location">
            <summary>
            获取用户地理位置（高级接口下才能用）
            获取用户地理位置的方式有两种，一种是仅在进入会话时上报一次，一种是进入会话后每隔5秒上报一次。公众号可以在公众平台网站中设置。
            用户同意上报地理位置后，每次进入公众号会话时，都会在进入时上报地理位置，或在进入会话后每5秒上报一次地理位置，上报地理位置以推送XML数据包到开发者填写的URL来实现。
            </summary>
        </member>
        <member name="P:Senparc.Weixin.MP.Entities.RequestMessageEvent_Location.Event">
            <summary>
            事件类型
            </summary>
        </member>
        <member name="P:Senparc.Weixin.MP.Entities.RequestMessageEvent_Location.Latitude">
            <summary>
            地理位置维度，事件类型为LOCATION的时存在
            </summary>
        </member>
        <member name="P:Senparc.Weixin.MP.Entities.RequestMessageEvent_Location.Longitude">
            <summary>
            地理位置经度，事件类型为LOCATION的时存在
            </summary>
        </member>
        <member name="P:Senparc.Weixin.MP.Entities.RequestMessageEvent_Location.Precision">
            <summary>
            地理位置精度，事件类型为LOCATION的时存在
            </summary>
        </member>
        <member name="P:Senparc.Weixin.MP.Entities.RequestMessageLocation.Location_X">
            <summary>
            地理位置纬度
            </summary>
        </member>
        <member name="P:Senparc.Weixin.MP.Entities.RequestMessageLocation.Location_Y">
            <summary>
            地理位置经度
            </summary>
        </member>
        <member name="P:Senparc.Weixin.MP.Entities.RequestMessageVoice.Format">
            <summary>
            语音格式：amr
            </summary>
        </member>
        <member name="P:Senparc.Weixin.MP.Entities.RequestMessageVoice.Recognition">
            <summary>
            语音识别结果，UTF8编码
            开通语音识别功能，用户每次发送语音给公众号时，微信会在推送的语音消息XML数据包中，增加一个Recongnition字段。
            注：由于客户端缓存，开发者开启或者关闭语音识别功能，对新关注者立刻生效，对已关注用户需要24小时生效。开发者可以重新关注此帐号进行测试。
            </summary>
        </member>
        <member name="T:Senparc.Weixin.MP.Entities.RequestMessageEvent_Subscribe">
            <summary>
            事件之订阅
            </summary>
        </member>
        <member name="P:Senparc.Weixin.MP.Entities.RequestMessageEvent_Subscribe.Event">
            <summary>
            事件类型
            </summary>
        </member>
        <member name="T:Senparc.Weixin.MP.Entities.RequestMessageEvent_Unsubscribe">
            <summary>
            事件之取消订阅
            </summary>
        </member>
        <member name="P:Senparc.Weixin.MP.Entities.RequestMessageEvent_Unsubscribe.Event">
            <summary>
            事件类型
            </summary>
        </member>
        <member name="T:Senparc.Weixin.MP.Entities.RequestMessageEvent_Click">
            <summary>
            事件之取消订阅
            </summary>
        </member>
        <member name="P:Senparc.Weixin.MP.Entities.RequestMessageEvent_Click.Event">
            <summary>
            事件类型
            </summary>
        </member>
        <member name="T:Senparc.Weixin.MP.Entities.RequestMessageEvent_Scan">
            <summary>
            事件之二维码扫描（关注微信）
            </summary>
        </member>
        <member name="P:Senparc.Weixin.MP.Entities.RequestMessageEvent_Scan.Event">
            <summary>
            事件类型
            </summary>
        </member>
        <member name="T:Senparc.Weixin.MP.Entities.RequestMessageEvent_View">
            <summary>
            事件之URL跳转视图（View）
            </summary>
        </member>
        <member name="P:Senparc.Weixin.MP.Entities.RequestMessageEvent_View.Event">
            <summary>
            事件类型
            </summary>
        </member>
        <member name="T:Senparc.Weixin.MP.Entities.ResponseMessageBase">
            <summary>
            响应回复消息
            </summary>
        </member>
        <member name="M:Senparc.Weixin.MP.Entities.ResponseMessageBase.CreateFromRequestMessage(Senparc.Weixin.MP.Entities.IRequestMessageBase,Senparc.Weixin.MP.ResponseMsgType)">
            <summary>
            获取响应类型实例，并初始化
            </summary>
            <param name="requestMessage">请求</param>
            <param name="msgType">响应类型</param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.MP.Entities.ResponseMessageBase.CreateFromRequestMessage``1(Senparc.Weixin.MP.Entities.IRequestMessageBase)">
            <summary>
            获取响应类型实例，并初始化
            </summary>
            <typeparam name="T">需要返回的类型</typeparam>
            <param name="requestMessage">请求数据</param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.MP.Entities.ResponseMessageBase.CreateFromResponseXml(System.String)">
            <summary>
            从返回结果XML转换成IResponseMessageBase实体类
            </summary>
            <param name="xml">返回给服务器的Response Xml</param>
            <returns></returns>
        </member>
        <member name="P:Senparc.Weixin.MP.Entities.ResponseMessageNews.Articles">
            <summary>
            文章列表，微信客户端只能输出前10条（可能未来数字会有变化，出于视觉效果考虑，建议控制在8条以内）
            </summary>
        </member>
        <member name="T:Senparc.Weixin.MP.Entities.ResponseMessageVoice">
            <summary>
            需要预先上传多媒体文件到微信服务器，只支持认证服务号。
            </summary>
        </member>
        <member name="T:Senparc.Weixin.MP.Entities.ResponseMessageVideo">
            <summary>
            需要预先上传多媒体文件到微信服务器，只支持认证服务号。
            </summary>
        </member>
        <member name="T:Senparc.Weixin.MP.RequestMsgType">
            <summary>
            接收消息类型
            </summary>
        </member>
        <member name="T:Senparc.Weixin.MP.Event">
            <summary>
            当RequestMsgType类型为Event时，Event属性的类型
            </summary>
        </member>
        <member name="F:Senparc.Weixin.MP.Event.ENTER">
            <summary>
            进入会话（似乎已从官方API中移除）
            </summary>
        </member>
        <member name="F:Senparc.Weixin.MP.Event.LOCATION">
            <summary>
            地理位置（似乎已从官方API中移除）
            </summary>
        </member>
        <member name="F:Senparc.Weixin.MP.Event.subscribe">
            <summary>
            订阅
            </summary>
        </member>
        <member name="F:Senparc.Weixin.MP.Event.unsubscribe">
            <summary>
            取消订阅
            </summary>
        </member>
        <member name="F:Senparc.Weixin.MP.Event.CLICK">
            <summary>
            自定义菜单点击事件
            </summary>
        </member>
        <member name="F:Senparc.Weixin.MP.Event.scan">
            <summary>
            二维码扫描
            </summary>
        </member>
        <member name="F:Senparc.Weixin.MP.Event.VIEW">
            <summary>
            URL跳转
            </summary>
        </member>
        <member name="T:Senparc.Weixin.MP.ResponseMsgType">
            <summary>
            发送消息类型
            </summary>
        </member>
        <member name="T:Senparc.Weixin.MP.ButtonType">
            <summary>
            菜单按钮类型
            </summary>
        </member>
        <member name="F:Senparc.Weixin.MP.ButtonType.click">
            <summary>
            点击
            </summary>
        </member>
        <member name="F:Senparc.Weixin.MP.ButtonType.view">
            <summary>
            Url
            </summary>
        </member>
        <member name="T:Senparc.Weixin.MP.UploadMediaFileType">
            <summary>
            上传媒体文件类型
            </summary>
        </member>
        <member name="F:Senparc.Weixin.MP.UploadMediaFileType.image">
            <summary>
            图片: 128K，支持JPG格式
            </summary>
        </member>
        <member name="F:Senparc.Weixin.MP.UploadMediaFileType.voice">
            <summary>
            语音：256K，播放长度不超过60s，支持AMR\MP3格式
            </summary>
        </member>
        <member name="F:Senparc.Weixin.MP.UploadMediaFileType.video">
            <summary>
            视频：1MB，支持MP4格式
            </summary>
        </member>
        <member name="F:Senparc.Weixin.MP.UploadMediaFileType.thumb">
            <summary>
            thumb：64KB，支持JPG格式
            </summary>
        </member>
        <member name="T:Senparc.Weixin.MP.ReturnCode">
            <summary>
            返回码（JSON）
            </summary>
        </member>
        <member name="T:Senparc.Weixin.MP.Language">
            <summary>
            语言
            </summary>
        </member>
        <member name="F:Senparc.Weixin.MP.Language.zh_CN">
            <summary>
            中文简体
            </summary>
        </member>
        <member name="F:Senparc.Weixin.MP.Language.zh_TW">
            <summary>
            中文繁体
            </summary>
        </member>
        <member name="F:Senparc.Weixin.MP.Language.en">
            <summary>
            英文
            </summary>
        </member>
        <member name="T:Senparc.Weixin.MP.ErrorJsonResultException">
            <summary>
            JSON返回错误代码（比如token_access相关操作中使用）。
            </summary>
        </member>
        <member name="T:Senparc.Weixin.MP.WeixinException">
            <summary>
            微信自定义异常基类
            </summary>
        </member>
        <member name="M:Senparc.Weixin.MP.Helpers.DateTimeHelper.GetDateTimeFromXml(System.Int64)">
            <summary>
            转换微信DateTime时间到C#时间
            </summary>
            <param name="dateTimeFromXml">微信DateTime</param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.MP.Helpers.DateTimeHelper.GetDateTimeFromXml(System.String)">
            <summary>
            转换微信DateTime时间到C#时间
            </summary>
            <param name="dateTimeFromXml">微信DateTime</param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.MP.Helpers.DateTimeHelper.GetWeixinDateTime(System.DateTime)">
            <summary>
            获取微信DateTime
            </summary>
            <param name="dateTime">时间</param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.MP.Helpers.EntityHelper.FillEntityWithXml``1(``0,System.Xml.Linq.XDocument)">
            <summary>
            根据XML信息填充实实体
            </summary>
            <typeparam name="T">MessageBase为基类的类型，Response和Request都可以</typeparam>
            <param name="entity">实体</param>
            <param name="doc">XML</param>
        </member>
        <member name="M:Senparc.Weixin.MP.Helpers.EntityHelper.ConvertEntityToXml``1(``0)">
            <summary>
            将实体转为XML
            </summary>
            <typeparam name="T">RequestMessage或ResponseMessage</typeparam>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.MP.Helpers.EntityHelper.ConvertEntityToXmlString``1(``0)">
            <summary>
            将实体转为XML字符串
            </summary>
            <typeparam name="T">RequestMessage或ResponseMessage</typeparam>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <!-- 对于成员“M:Senparc.Weixin.MP.Helpers.EntityHelper.CreateResponseMessage``1(Senparc.Weixin.MP.Entities.IRequestMessageBase)”忽略有格式错误的 XML 注释 -->
        <member name="M:Senparc.Weixin.MP.Helpers.EntityHelper.CreateResponseMessage(System.String)">
            <summary>
            ResponseMessageBase.CreateFromResponseXml(xml)的扩展方法
            </summary>
            <param name="xml">返回给服务器的Response Xml</param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.MP.Helpers.FileHelper.GetFileStream(System.String)">
            <summary>
            根据完整文件路径获取FileStream
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.MP.Helpers.GoogleMapHelper.GetGoogleStaticMap(System.Int32,System.Collections.Generic.IList{Senparc.Weixin.MP.Entities.GoogleMap.Markers},System.String)">
            <summary>
            获取谷歌今天静态地图Url。API介绍：https://developers.google.com/maps/documentation/staticmaps/?hl=zh-CN
            </summary>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.MP.Helpers.GpsHelper.Distance(System.Double,System.Double,System.Double,System.Double)">
             <summary>
            计算两点GPS坐标的距离（单位：米）
             </summary>
             <param name="n1">第一点的纬度坐标</param>
             <param name="e1">第一点的经度坐标</param>
             <param name="n2">第二点的纬度坐标</param>
             <param name="e2">第二点的经度坐标</param>
             <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.MP.Helpers.GpsHelper.GetLatitudeDifference(System.Double)">
            <summary>
            获取维度差
            </summary>
            <param name="km">千米</param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.MP.Helpers.GpsHelper.GetLongitudeDifference(System.Double)">
            <summary>
            获取经度差
            </summary>
            <param name="km">千米</param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.MP.Helpers.MsgTypeHelper.GetRequestMsgType(System.Xml.Linq.XDocument)">
            <summary>
            根据xml信息，返回RequestMsgType
            </summary>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.MP.Helpers.MsgTypeHelper.GetRequestMsgType(System.String)">
            <summary>
            根据xml信息，返回RequestMsgType
            </summary>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.MP.Helpers.MsgTypeHelper.GetResponseMsgType(System.Xml.Linq.XDocument)">
            <summary>
            根据xml信息，返回ResponseMsgType
            </summary>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.MP.Helpers.MsgTypeHelper.GetResponseMsgType(System.String)">
            <summary>
            根据xml信息，返回ResponseMsgType
            </summary>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.MP.Helpers.SerializerHelper.DecodeUnicode(System.Text.RegularExpressions.Match)">
            <summary>
            unicode解码
            </summary>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.MP.HttpUtility.Post.GetResult``1(System.String)">
            <summary>
            获取Post结果
            </summary>
            <typeparam name="T"></typeparam>
            <param name="returnText"></param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.MP.HttpUtility.Post.PostFileGetJson``1(System.String,System.Net.CookieContainer,System.Collections.Generic.Dictionary{System.String,System.String},System.Text.Encoding)">
            <summary>
            发起Post请求
            </summary>
            <typeparam name="T">返回数据类型（Json对应的实体）</typeparam>
            <param name="url">请求Url</param>
            <param name="cookieContainer">CookieContainer，如果不需要则设为null</param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.MP.HttpUtility.Post.PostGetJson``1(System.String,System.Net.CookieContainer,System.IO.Stream,System.Text.Encoding)">
            <summary>
            发起Post请求
            </summary>
            <typeparam name="T">返回数据类型（Json对应的实体）</typeparam>
            <param name="url">请求Url</param>
            <param name="cookieContainer">CookieContainer，如果不需要则设为null</param>
            <param name="fileStream">文件流</param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.MP.HttpUtility.RequestUtility.HttpGet(System.String,System.Text.Encoding)">
            <summary>
            使用Get方法获取字符串结果（没有加入Cookie）
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.MP.HttpUtility.RequestUtility.HttpGet(System.String,System.Net.CookieContainer,System.Text.Encoding)">
            <summary>
            使用Get方法获取字符串结果（加入Cookie）
            </summary>
            <param name="url"></param>
            <param name="cookieContainer"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.MP.HttpUtility.RequestUtility.HttpPost(System.String,System.Net.CookieContainer,System.Collections.Generic.Dictionary{System.String,System.String},System.Text.Encoding)">
            <summary>
            使用Post方法获取字符串结果，常规提交
            </summary>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.MP.HttpUtility.RequestUtility.HttpPost(System.String,System.Net.CookieContainer,System.IO.Stream,System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.Text.Encoding)">
            <summary>
            使用Post方法获取字符串结果
            </summary>
            <param name="url"></param>
            <param name="cookieContainer"></param>
            <param name="postStream"></param>
            <param name="fileDictionary">需要上传的文件，Key：对应要上传的Name，Value：本地文件名</param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.MP.HttpUtility.RequestUtility.IsWeixinClientRequest(System.Web.HttpContext)">
            <summary>
            请求是否发起自微信客户端的浏览器
            </summary>
            <param name="httpContext"></param>
            <returns></returns>
        </member>
        <!-- 对于成员“M:Senparc.Weixin.MP.HttpUtility.RequestUtility.GetQueryString(System.Collections.Generic.Dictionary{System.String,System.String})”忽略有格式错误的 XML 注释 -->
        <member name="M:Senparc.Weixin.MP.HttpUtility.RequestUtility.HtmlEncode(System.String)">
            <summary>
            封装System.Web.HttpUtility.HtmlEncode
            </summary>
            <param name="html"></param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.MP.HttpUtility.RequestUtility.HtmlDecode(System.String)">
            <summary>
            封装System.Web.HttpUtility.HtmlDecode
            </summary>
            <param name="html"></param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.MP.HttpUtility.RequestUtility.UrlEncode(System.String)">
            <summary>
            封装System.Web.HttpUtility.UrlEncode
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.MP.HttpUtility.RequestUtility.UrlDecode(System.String)">
            <summary>
            封装System.Web.HttpUtility.UrlDecode
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.MP.MessageHandlers.IMessageHandler.Execute">
            <summary>
            执行微信请求
            </summary>
        </member>
        <member name="P:Senparc.Weixin.MP.MessageHandlers.IMessageHandler.WeixinOpenId">
            <summary>
            发送者用户名（OpenId）
            </summary>
        </member>
        <member name="P:Senparc.Weixin.MP.MessageHandlers.IMessageHandler.CancelExcute">
            <summary>
            取消执行Execute()方法。一般在OnExecuting()中用于临时阻止执行Execute()。
            默认为False。
            如果在执行OnExecuting()执行前设为True，则所有OnExecuting()、Execute()、OnExecuted()代码都不会被执行。
            如果在执行OnExecuting()执行过程中设为True，则后续Execute()及OnExecuted()代码不会被执行。
            建议在设为True的时候，给ResponseMessage赋值，以返回友好信息。
            </summary>
        </member>
        <member name="P:Senparc.Weixin.MP.MessageHandlers.IMessageHandler.RequestDocument">
            <summary>
            在构造函数中转换得到原始XML数据
            </summary>
        </member>
        <member name="P:Senparc.Weixin.MP.MessageHandlers.IMessageHandler.ResponseDocument">
            <summary>
            根据ResponseMessageBase获得转换后的ResponseDocument
            注意：这里每次请求都会根据当前的ResponseMessageBase生成一次，如需重用此数据，建议使用缓存或局部变量
            </summary>
        </member>
        <member name="P:Senparc.Weixin.MP.MessageHandlers.IMessageHandler.RequestMessage">
            <summary>
            请求实体
            </summary>
        </member>
        <member name="P:Senparc.Weixin.MP.MessageHandlers.IMessageHandler.ResponseMessage">
            <summary>
            响应实体
            只有当执行Execute()方法后才可能有值
            </summary>
        </member>
        <member name="P:Senparc.Weixin.MP.MessageHandlers.IMessageHandler.UsedMessageAgent">
            <summary>
            是否使用了MessageAgent代理
            </summary>
        </member>
        <member name="T:Senparc.Weixin.MP.MessageHandlers.MessageHandler`1">
            <summary>
            微信请求的集中处理方法
            此方法中所有过程，都基于Senparc.Weixin.MP的基础功能，只为简化代码而设。
            </summary>
        </member>
        <member name="F:Senparc.Weixin.MP.MessageHandlers.MessageHandler`1.GlobalWeixinContext">
            <summary>
            上下文
            </summary>
        </member>
        <member name="M:Senparc.Weixin.MP.MessageHandlers.MessageHandler`1.CreateResponseMessage``1">
            <summary>
            根据当前的RequestMessage创建指定类型的ResponseMessage
            </summary>
            <typeparam name="TR">基于ResponseMessageBase的响应消息类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.MP.MessageHandlers.MessageHandler`1.Execute">
            <summary>
            执行微信请求
            </summary>
        </member>
        <member name="M:Senparc.Weixin.MP.MessageHandlers.MessageHandler`1.DefaultResponseMessage(Senparc.Weixin.MP.Entities.IRequestMessageBase)">
            <summary>
            默认返回消息（当任何OnXX消息没有被重写，都将自动返回此默认消息）
            </summary>
        </member>
        <member name="M:Senparc.Weixin.MP.MessageHandlers.MessageHandler`1.OnTextOrEventRequest(Senparc.Weixin.MP.Entities.RequestMessageText)">
            <summary>
            预处理文字或事件类型请求。
            这个请求是一个比较特殊的请求，通常用于统一处理来自文字或菜单按钮的同一个执行逻辑，
            会在执行OnTextRequest或OnEventRequest之前触发，具有以下一些特征：
            1、如果返回null，则继续执行OnTextRequest或OnEventRequest
            2、如果返回不为null，则终止执行OnTextRequest或OnEventRequest，返回最终ResponseMessage
            3、如果是事件，则会将RequestMessageEvent自动转为RequestMessageText类型，其中RequestMessageText.Content就是RequestMessageEvent.EventKey
            </summary>
        </member>
        <member name="M:Senparc.Weixin.MP.MessageHandlers.MessageHandler`1.OnTextRequest(Senparc.Weixin.MP.Entities.RequestMessageText)">
            <summary>
            文字类型请求
            </summary>
        </member>
        <member name="M:Senparc.Weixin.MP.MessageHandlers.MessageHandler`1.OnLocationRequest(Senparc.Weixin.MP.Entities.RequestMessageLocation)">
            <summary>
            位置类型请求
            </summary>
        </member>
        <member name="M:Senparc.Weixin.MP.MessageHandlers.MessageHandler`1.OnImageRequest(Senparc.Weixin.MP.Entities.RequestMessageImage)">
            <summary>
            图片类型请求
            </summary>
        </member>
        <member name="M:Senparc.Weixin.MP.MessageHandlers.MessageHandler`1.OnVoiceRequest(Senparc.Weixin.MP.Entities.RequestMessageVoice)">
            <summary>
            语音类型请求
            </summary>
        </member>
        <member name="M:Senparc.Weixin.MP.MessageHandlers.MessageHandler`1.OnVideoRequest(Senparc.Weixin.MP.Entities.RequestMessageVideo)">
            <summary>
            视频类型请求
            </summary>
        </member>
        <member name="M:Senparc.Weixin.MP.MessageHandlers.MessageHandler`1.OnLinkRequest(Senparc.Weixin.MP.Entities.RequestMessageLink)">
            <summary>
            链接消息类型请求
            </summary>
        </member>
        <member name="M:Senparc.Weixin.MP.MessageHandlers.MessageHandler`1.OnEventRequest(Senparc.Weixin.MP.Entities.IRequestMessageEventBase)">
            <summary>
            Event事件类型请求
            </summary>
        </member>
        <member name="M:Senparc.Weixin.MP.MessageHandlers.MessageHandler`1.OnEvent_EnterRequest(Senparc.Weixin.MP.Entities.RequestMessageEvent_Enter)">
            <summary>
            Event事件类型请求之ENTER
            </summary>
        </member>
        <member name="M:Senparc.Weixin.MP.MessageHandlers.MessageHandler`1.OnEvent_LocationRequest(Senparc.Weixin.MP.Entities.RequestMessageEvent_Location)">
            <summary>
            Event事件类型请求之LOCATION
            </summary>
        </member>
        <member name="M:Senparc.Weixin.MP.MessageHandlers.MessageHandler`1.OnEvent_SubscribeRequest(Senparc.Weixin.MP.Entities.RequestMessageEvent_Subscribe)">
            <summary>
            Event事件类型请求之subscribe
            </summary>
        </member>
        <member name="M:Senparc.Weixin.MP.MessageHandlers.MessageHandler`1.OnEvent_UnsubscribeRequest(Senparc.Weixin.MP.Entities.RequestMessageEvent_Unsubscribe)">
            <summary>
            Event事件类型请求之unsubscribe
            </summary>
        </member>
        <member name="M:Senparc.Weixin.MP.MessageHandlers.MessageHandler`1.OnEvent_ClickRequest(Senparc.Weixin.MP.Entities.RequestMessageEvent_Click)">
            <summary>
            Event事件类型请求之CLICK
            </summary>
        </member>
        <member name="M:Senparc.Weixin.MP.MessageHandlers.MessageHandler`1.OnEvent_ScanRequest(Senparc.Weixin.MP.Entities.RequestMessageEvent_Scan)">
            <summary>
            Event事件类型请求之scan
            </summary>
        </member>
        <member name="M:Senparc.Weixin.MP.MessageHandlers.MessageHandler`1.OnEvent_ViewRequest(Senparc.Weixin.MP.Entities.RequestMessageEvent_View)">
            <summary>
            事件之URL跳转视图（View）
            </summary>
            <returns></returns>
        </member>
        <member name="P:Senparc.Weixin.MP.MessageHandlers.MessageHandler`1.WeixinContext">
            <summary>
            全局消息上下文
            </summary>
        </member>
        <member name="P:Senparc.Weixin.MP.MessageHandlers.MessageHandler`1.CurrentMessageContext">
            <summary>
            当前用户消息上下文
            </summary>
        </member>
        <member name="P:Senparc.Weixin.MP.MessageHandlers.MessageHandler`1.WeixinOpenId">
            <summary>
            发送者用户名（OpenId）
            </summary>
        </member>
        <member name="P:Senparc.Weixin.MP.MessageHandlers.MessageHandler`1.UserName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Senparc.Weixin.MP.MessageHandlers.MessageHandler`1.CancelExcute">
            <summary>
            取消执行Execute()方法。一般在OnExecuting()中用于临时阻止执行Execute()。
            默认为False。
            如果在执行OnExecuting()执行前设为True，则所有OnExecuting()、Execute()、OnExecuted()代码都不会被执行。
            如果在执行OnExecuting()执行过程中设为True，则后续Execute()及OnExecuted()代码不会被执行。
            建议在设为True的时候，给ResponseMessage赋值，以返回友好信息。
            </summary>
        </member>
        <member name="P:Senparc.Weixin.MP.MessageHandlers.MessageHandler`1.RequestDocument">
            <summary>
            在构造函数中转换得到原始XML数据
            </summary>
        </member>
        <member name="P:Senparc.Weixin.MP.MessageHandlers.MessageHandler`1.ResponseDocument">
            <summary>
            根据ResponseMessageBase获得转换后的ResponseDocument
            注意：这里每次请求都会根据当前的ResponseMessageBase生成一次，如需重用此数据，建议使用缓存或局部变量
            </summary>
        </member>
        <member name="P:Senparc.Weixin.MP.MessageHandlers.MessageHandler`1.RequestMessage">
            <summary>
            请求实体
            </summary>
        </member>
        <member name="P:Senparc.Weixin.MP.MessageHandlers.MessageHandler`1.ResponseMessage">
            <summary>
            响应实体
            正常情况下只有当执行Execute()方法后才可能有值。
            也可以结合Cancel，提前给ResponseMessage赋值。
            </summary>
        </member>
        <member name="P:Senparc.Weixin.MP.MessageHandlers.MessageHandler`1.UsedMessageAgent">
            <summary>
            是否使用了MessageAgent代理
            </summary>
        </member>
        <member name="M:Senparc.Weixin.MP.RequestMessageFactory.GetRequestEntity(System.Xml.Linq.XDocument)">
            <summary>
            获取XDocument转换后的IRequestMessageBase实例。
            如果MsgType不存在，抛出UnknownRequestMsgTypeException异常
            </summary>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.MP.RequestMessageFactory.GetRequestEntity(System.String)">
            <summary>
            获取XDocument转换后的IRequestMessageBase实例。
            如果MsgType不存在，抛出UnknownRequestMsgTypeException异常
            </summary>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.MP.RequestMessageFactory.GetRequestEntity(System.IO.Stream)">
            <summary>
            获取XDocument转换后的IRequestMessageBase实例。
            如果MsgType不存在，抛出UnknownRequestMsgTypeException异常
            </summary>
            <param name="stream">如Request.InputStream</param>
            <returns></returns>
        </member>
        <member name="T:Senparc.Weixin.MP.UnknownRequestMsgTypeException">
            <summary>
            未知请求类型。
            </summary>
        </member>
        <member name="M:Senparc.Weixin.MP.ResponseMessageFactory.GetResponseEntity(System.Xml.Linq.XDocument)">
            <summary>
            获取XDocument转换后的IResponseMessageBase实例（通常在反向读取日志的时候用到）。
            如果MsgType不存在，抛出UnknownRequestMsgTypeException异常
            </summary>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.MP.ResponseMessageFactory.GetResponseEntity(System.String)">
            <summary>
            获取XDocument转换后的IRequestMessageBase实例。
            如果MsgType不存在，抛出UnknownRequestMsgTypeException异常
            </summary>
            <returns></returns>
        </member>
        <member name="P:Senparc.Weixin.MP.Context.IMessageContext.UserName">
            <summary>
            用户名（OpenID）
            </summary>
        </member>
        <member name="P:Senparc.Weixin.MP.Context.IMessageContext.LastActiveTime">
            <summary>
            最后一次活动时间（用户主动发送Resquest请求的时间）
            </summary>
        </member>
        <member name="P:Senparc.Weixin.MP.Context.IMessageContext.RequestMessages">
            <summary>
            接收消息记录
            </summary>
        </member>
        <member name="P:Senparc.Weixin.MP.Context.IMessageContext.ResponseMessages">
            <summary>
            响应消息记录
            </summary>
        </member>
        <member name="P:Senparc.Weixin.MP.Context.IMessageContext.MaxRecordCount">
            <summary>
            最大储存容量（分别针对RequestMessages和ResponseMessages）
            </summary>
        </member>
        <member name="P:Senparc.Weixin.MP.Context.IMessageContext.StorageData">
            <summary>
            临时储存数据，如用户状态等，出于保持.net 3.5版本，这里暂不使用dynamic
            </summary>
        </member>
        <member name="P:Senparc.Weixin.MP.Context.IMessageContext.ExpireMinutes">
            <summary>
            用于覆盖WeixinContext所设置的默认过期时间
            </summary>
        </member>
        <member name="T:Senparc.Weixin.MP.Context.MessageContext">
            <summary>
            微信消息上下文（单个用户）
            </summary>
        </member>
        <member name="M:Senparc.Weixin.MP.Context.MessageContext.OnMessageContextRemoved(Senparc.Weixin.MP.Context.WeixinContextRemovedEventArgs)">
            <summary>
            执行上下文被移除的事件
            注意：此事件不是实时触发的，而是等过期后任意一个人发过来的下一条消息执行之前触发。
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Senparc.Weixin.MP.Context.MessageContext.#ctor">
            <summary>
            
            </summary>
            <param name="maxRecordCount">maxRecordCount如果小于等于0，则不限制</param>
        </member>
        <member name="F:Senparc.Weixin.MP.Context.WeixinContextGlobal.UseWeixinContext">
            <summary>
            是否开启上下文记录
            </summary>
        </member>
        <member name="T:Senparc.Weixin.MP.Context.WeixinContext`1">
            <summary>
            微信消息上下文（全局）
            默认过期时间：90分钟
            </summary>
        </member>
        <member name="M:Senparc.Weixin.MP.Context.WeixinContext`1.Restore">
            <summary>
            重置所有上下文参数，所有记录将被清空
            </summary>
        </member>
        <member name="M:Senparc.Weixin.MP.Context.WeixinContext`1.GetMessageContext(System.String)">
            <summary>
            获取MessageContext，如果不存在，返回null
            这个方法的更重要意义在于操作TM队列，及时移除过期信息，并将最新活动的对象移到尾部
            </summary>
            <param name="userName">用户名（OpenId）</param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.MP.Context.WeixinContext`1.GetMessageContext(System.String,System.Boolean)">
            <summary>
            获取MessageContext
            </summary>
            <param name="userName">用户名（OpenId）</param>
            <param name="createIfNotExists">True：如果用户不存在，则创建一个实例，并返回这个最新的实例
            False：用户储存在，则返回null</param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.MP.Context.WeixinContext`1.GetMessageContext(Senparc.Weixin.MP.Entities.IRequestMessageBase)">
            <summary>
            获取MessageContext，如果不存在，使用requestMessage信息初始化一个，并返回原始实例
            </summary>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.MP.Context.WeixinContext`1.GetMessageContext(Senparc.Weixin.MP.Entities.IResponseMessageBase)">
            <summary>
            获取MessageContext，如果不存在，使用requestMessage信息初始化一个，并返回原始实例
            </summary>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.MP.Context.WeixinContext`1.InsertMessage(Senparc.Weixin.MP.Entities.IRequestMessageBase)">
            <summary>
            记录请求信息
            </summary>
            <param name="requestMessage">请求信息</param>
        </member>
        <member name="M:Senparc.Weixin.MP.Context.WeixinContext`1.InsertMessage(Senparc.Weixin.MP.Entities.IResponseMessageBase)">
            <summary>
            记录响应信息
            </summary>
            <param name="responseMessage">响应信息</param>
        </member>
        <member name="M:Senparc.Weixin.MP.Context.WeixinContext`1.GetLastRequestMessage(System.String)">
            <summary>
            获取最新一条请求数据，如果不存在，则返回Null
            </summary>
            <param name="userName">用户名（OpenId）</param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.MP.Context.WeixinContext`1.GetLastResponseMessage(System.String)">
            <summary>
            获取最新一条响应数据，如果不存在，则返回Null
            </summary>
            <param name="userName">用户名（OpenId）</param>
            <returns></returns>
        </member>
        <member name="P:Senparc.Weixin.MP.Context.WeixinContext`1.MessageCollection">
            <summary>
            所有MessageContext集合，不要直接操作此对象
            </summary>
        </member>
        <member name="P:Senparc.Weixin.MP.Context.WeixinContext`1.MessageQueue">
            <summary>
            MessageContext列队（LastActiveTime升序排列）,不要直接操作此对象
            </summary>
        </member>
        <member name="P:Senparc.Weixin.MP.Context.WeixinContext`1.ExpireMinutes">
            <summary>
            每一个MessageContext过期时间
            </summary>
        </member>
        <member name="P:Senparc.Weixin.MP.Context.WeixinContext`1.MaxRecordCount">
            <summary>
            最大储存上下文数量（分别针对请求和响应信息）
            </summary>
        </member>
    </members>
</doc>
